### All comments that start with three #s, as well as empty lines are ignored (i.e., not passed to LLM)
### We assume that in the initial state, the box is always open (to avoid describing what's in the box as part of world state)
### NOTE: things to consider
### 1. Adding CoT (# THINK: blah)

### Categories to keep in mind: ['box', 'metainfo', 'stack']

In the following, the robot deals with dirty and clean blocks.
A clean block becomes dirty when it touches another dirty block.
This includes when a dirty block is stacked on top of a clean block, and also when a dirty block is right under a clean block.
The table, bowls and the robot gripper are protected from any dirtiness, so they stay clean forever.
When a dirty block is put into the disinfector, it becomes clean immediately.

Instruction:
Aside from the built-in python functions and statements, the robot can only run the following functions:
`put_first_on_second`, `say` and `update_wm`.

Each code is carefully designed by professionals to meet all of these requirements.

If there is a state dictionary, you should generate functions based on the information in the state dictionary!!

===

### example 1

# state = {objects = ["cyan block", "yellow block", "brown block", "purple block", "blue block", "green bowl", "red bowl", "disinfector"]}

# query: The cyan block and purple block are dirty
update_wm("The cyan and purple blocks are dirty")

# query: The other blocks are clean
update_wm("The brown block, yellow block, and blue block are clean")

# query: Put the cyan block on the yellow block
put_first_on_second("cyan block", "yellow block")
update_wm("Put the cyan block on the yellow block.")

# query: Put the brown block in the green bowl
put_first_on_second("brown block", "green bowl")
update_wm("Put the brown block in the green bowl")

# query: Woops, somebody took out the brown block and dropped it on a dirty area
update_wm("Put the brown block on the table, and make it dirty")

# query: Pick the cyan block and put it on the table
put_first_on_second("cyan block", "table")
update_wm("Put the cyan block on the table")

# query: Move the yellow block into the disinfector
put_first_on_second("yellow block", "disinfector")
update_wm("Put the yellow block in the disinfector")

# query: Place all the clean blocks in the green bowl
# THINK: The clean blocks are yellow block and purple block
put_first_on_second("blue block", "green bowl")
put_first_on_second("yellow block", "green bowl")
update_wm("Put the blue and yellow blocks in green bowl")

# query: Put the cyan and purple block in the disinfector
put_first_on_second("cyan block", "disinfector")
put_first_on_second("purple block", "disinfector")
update_wm("Put the cyan and purple blocks in the disinfector")

# query: Put the dirty blocks in the red bowl
# THINK: The only dirty block is the brown block
put_first_on_second("brown block", "red bowl")
update_wm("Put the brown block in the red bowl")

# query: Pick the blue block and put it on the table
put_first_on_second("blue block", "table")
update_wm("Put the blue block on the table")

# query: Put the yellow block on the table
put_first_on_second("yellow block", "table")
update_wm("Put the yellow block on the table")

### Example to show that it can pick from a bowl
# query: Put the brown block in the green bowl
put_first_on_second("cyan block", "green bowl")
update_wm("Put the cyan block in the green bowl")

# query: How many blocks are in the red bowl
# THINK: the red bowl is empty
say("There is no block in the red bowl")

===
