### Empty lines and comments that start with ### are ignored (i.e. not passed to LLM).

# Your name is Husky
# Let's make sure to write an executable Python code. Make sure to start comments with '#'
# When the comment is just to pick an object, without specifying where to place, place it in the 'wooden box'
# Remember that the code must either pick **and** place an object or just say something
# NOTE: You CANNOT pick the wooden box, you can only place something in it
# Don't just get object position and finish the job. The code should always pick and place an object
### These are here to explicitly tell the LLM what functions are available
import numpy as np
from env_utils import put_first_on_second, get_obj_pos, get_obj_names, say, get_corner_name, get_side_name, is_obj_visible, stack_objects_in_order
from plan_utils import parse_obj_name, parse_position, parse_question, transform_shape_pts

### Step 0
objects = ['yellow block', 'green block', 'yellow bowl', 'blue block', 'blue bowl', 'green bowl']
# the yellow block on the yellow bowl.
say("Ok - putting the yellow block on the yellow bowl")
put_first_on_second('yellow block', 'yellow bowl')

### Step 1
objects = ['yellow block', 'green block', 'yellow bowl', 'blue block', 'blue bowl', 'green bowl']
# move the green block to the top right corner.
say("Got it - putting the green block on the top right corner")
corner_pos = parse_position('top right corner')
put_first_on_second('green block', corner_pos)

### Step 2
objects = ['cyan block', 'white block', 'cyan bowl', 'blue block', 'blue bowl', 'white bowl']
# make a line of blocks on the right side.
say("No problem! Making a line of blocks on the right side")
block_names = parse_obj_name('the blocks', f'objects = {get_obj_names()}')
line_pts = parse_position(f'a 30cm vertical line on the right with {len(block_names)} points')
for block_name, pt in zip(block_names, line_pts):
put_first_on_second(block_name, pt)

### Step 3
objects = ['yellow block', 'red block', 'yellow bowl', 'gray block', 'gray bowl', 'red bowl']
# put the small banana colored thing in between the blue bowl and green block.
say("Sure thing - putting the yellow block between the blue bowl and the green block")
target_pos = parse_position('a point in the middle between the blue bowl and the green block')
put_first_on_second('yellow block', target_pos)

### Step 4
objects = ['yellow block', 'red block', 'yellow bowl', 'gray block', 'gray bowl', 'red bowl']
# can you cut the bowls in half.
say("no, I can only move objects around")

### Step 5
objects = ['yellow block', 'green block', 'yellow bowl', 'gray block', 'gray bowl', 'green bowl']
# stack the blocks on the right side with the gray one on the bottom.
say("Ok. stacking the blocks on the right side with the gray block on the bottom")
right_side = parse_position('the right side')
put_first_on_second('gray block', right_side)
order_bottom_to_top = ['gray block', 'green block', 'yellow block']
stack_objects_in_order(object_names=order_bottom_to_top)

### Step 6
objects = ['pink block', 'green block', 'pink bowl', 'blue block', 'blue bowl', 'green bowl']
# stack everything with the green block on top.
say("Ok! Stacking everything with the green block on the top")
order_bottom_to_top = ['blue bowl', 'pink bowl', 'green bowl', 'pink block', 'blue block', 'green block']
stack_objects_in_order(object_names=order_bottom_to_top)

### Step 7
objects = ['pink block', 'green block', 'pink bowl', 'blue block', 'blue bowl', 'green bowl']
# move the grass-colored bowl to the left.
say("Sure - moving the green bowl left by 10 centimeters")
left_pos = parse_position('a point 10cm left of the green bowl')
put_first_on_second('green bowl', left_pos)

### Step 8
objects = ['brown bowl', 'green block', 'brown block', 'green bowl', 'blue bowl', 'blue block']
# place the top most block to the corner closest to the bottom most block.
top_block_name = parse_obj_name('top most block', f'objects = {get_obj_names()}')
bottom_block_name = parse_obj_name('bottom most block', f'objects = {get_obj_names()}')
closest_corner_pos = parse_position(f'the corner closest to the {bottom_block_name}', f'objects = {get_obj_names()}')
say(f'Putting the {top_block_name} on the {get_corner_name(closest_corner_pos)}')
put_first_on_second(top_block_name, closest_corner_pos)

### Step 9
objects = ['brown bowl', 'green block', 'brown block', 'green bowl', 'blue bowl', 'blue block']
# move the brown bowl to the side closest to the green block.
closest_side_position = parse_position('the side closest to the green block')
say(f'Got it - putting the brown bowl on the {get_side_name(closest_side_position)}')
put_first_on_second('brown bowl', closest_side_position)

### Step 10
objects = ['brown bowl', 'green block', 'brown block', 'green bowl', 'blue bowl', 'blue block']
# move the other blocks to the bottom corners.
block_names = parse_obj_name('blocks other than the blue block', f'objects = {get_obj_names()}')
corners = parse_position('the bottom corners')
for block_name, pos in zip(block_names, corners):
put_first_on_second(block_name, pos)

### Step 11
objects = ['brown bowl', 'green block', 'brown block', 'green bowl', 'blue bowl', 'blue block']
# move the red bowl a lot to the left of the blocks.
say("Sure! Moving the red bowl to a point left of the blocks")
left_pos = parse_position('a point 20cm left of the blocks')
put_first_on_second('red bowl', left_pos)

### Step 12
objects = ['pink block', 'gray block', 'orange block']
# move the pinkish colored block on the bottom side.
say("Ok - putting the pink block on the bottom side")
bottom_side_pos = parse_position('the bottom side')
put_first_on_second('pink block', bottom_side_pos)

### Step 13
objects = ['yellow bowl', 'blue block', 'yellow block', 'blue bowl']
# how many yellow objects are there?
n_yellow_objs = parse_question('how many yellow objects are there', f'objects = {get_obj_names()}')
say(f'there are {n_yellow_objs} yellow object')

### Step 14
objects = ['pink block', 'green block', 'pink bowl', 'blue block', 'blue bowl', 'green bowl']
# move the left most block to the green bowl.
left_block_name = parse_obj_name('left most block', f'objects = {get_obj_names()}')
say(f'Moving the {left_block_name} on the green bowl')
put_first_on_second(left_block_name, 'green bowl')

### Step 15
objects = ['pink block', 'green block', 'pink bowl', 'blue block', 'blue bowl', 'green bowl']
# move the other blocks to different corners.
block_names = parse_obj_name(f'blocks other than the {left_block_name}', f'objects = {get_obj_names()}')
corners = parse_position('the corners')
say(f'Ok - moving the other {len(block_names)} blocks to different corners')
for block_name, pos in zip(block_names, corners):
put_first_on_second(block_name, pos)

### Step 16
objects = ['pink block', 'green block', 'pink bowl', 'blue block', 'blue bowl', 'green bowl']
# is the pink block on the green bowl.
if parse_question('is the pink block on the green bowl', f'objects = {get_obj_names()}'):
say("Yes - the pink block is on the green bowl.")
else:
say("No - the pink block is not on the green bowl.")

### Step 17
objects = ['pink block', 'green block', 'pink bowl', 'blue block', 'blue bowl', 'green bowl']
# what are the blocks left of the green bowl.
left_block_names =  parse_question('what are the blocks left of the green bowl', f'objects = {get_obj_names()}')
if len(left_block_names) > 0:
say(f'These blocks are left of the green bowl: {", ".join(left_block_names)}')
else:
say("There are no blocks left of the green bowl")

### Step 18
objects = ['yellow block', 'green block', 'yellow bowl', 'blue block', 'blue bowl', 'green bowl']
# imagine that the bowls are different biomes on earth and imagine that the blocks are parts of a building.
say("ok")

### Step 20
objects = ['yellow block', 'green block', 'yellow bowl', 'blue block', 'blue bowl', 'green bowl']
# now build a tower in the grasslands.
order_bottom_to_top = ['green bowl', 'blue block', 'green block', 'yellow block']
say("stacking the blocks on the green bowl")
stack_objects_in_order(object_names=order_bottom_to_top)

### Step 21
objects = ['yellow block', 'green block', 'yellow bowl', 'blue block', 'blue bowl', 'green bowl']
# imagine that the bowls are different biomes on earth and imagine that the blocks are parts of a building.
say("ok")

### Step 22
objects = ['yellow block', 'green block', 'yellow bowl', 'blue block', 'blue bowl', 'green bowl']
# now build a tower in the grasslands.
order_bottom_to_top = ['green bowl', 'blue block', 'green block', 'yellow block']
say("stacking the blocks on the green bowl")
stack_objects_in_order(object_names=order_bottom_to_top)

### Step 23
objects = ['yellow block', 'green block', 'yellow bowl', 'gray block', 'gray bowl', 'green bowl']
# show me what happens when the desert gets flooded by the ocean.
say("putting the yellow bowl on the blue bowl")
put_first_on_second('yellow bowl', 'blue bowl')

### Step 24
objects = ['pink block', 'gray block', 'orange block']
# move all blocks 5cm toward the top.
say("Ok - moving all blocks 5cm toward the top")
block_names = parse_obj_name('the blocks', f'objects = {get_obj_names()}')
for block_name in block_names:
target_pos = parse_position(f'a point 5cm above the {block_name}')
put_first_on_second(block_name, target_pos)

### Step 25
objects = ['cyan block', 'white block', 'purple bowl', 'blue block', 'blue bowl', 'white bowl']
# make a triangle of blocks in the middle.
block_names = parse_obj_name('the blocks', f'objects = {get_obj_names()}')
triangle_pts = parse_position(f'a triangle with size 10cm around the middle with {len(block_names)} points')
say("Making a triangle of blocks around the middle of the workspace")
for block_name, pt in zip(block_names, triangle_pts):
put_first_on_second(block_name, pt)

### Step 26
objects = ['cyan block', 'white block', 'purple bowl', 'blue block', 'blue bowl', 'white bowl']
# make the triangle smaller.
triangle_pts = transform_shape_pts('scale it by 0.5x', shape_pts=triangle_pts)
say("Making the triangle smaller")
block_names = parse_obj_name('the blocks', f'objects = {get_obj_names()}')
for block_name, pt in zip(block_names, triangle_pts):
put_first_on_second(block_name, pt)

### Step 27
objects = ['brown bowl', 'red block', 'brown block', 'red bowl', 'pink bowl', 'pink block']
# put the red block on the farthest bowl.
farthest_bowl_name = parse_obj_name('the bowl farthest from the red block', f'objects = {get_obj_names()}')
say(f'Putting the red block on the {farthest_bowl_name}')
put_first_on_second('red block', farthest_bowl_name)